.boilerplate{{{/+
    Copyright (c) 2006 Eric Anderton

    Permission is hereby granted, free of charge, to any person
    obtaining a copy of this software and associated documentation
    files (the "Software"), to deal in the Software without
    restriction, including without limitation the rights to use,
    copy, modify, merge, publish, distribute, sublicense, and/or
    sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following
    conditions:

    The above copyright notice and this permission notice shall be
    included in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
    OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
    HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
    OTHER DEALINGS IN THE SOFTWARE.
+/}}}

# based on the XML specification
# http://www.w3.org/TR/2004/REC-xml-20040204/#sec-cdata-sect

.module("xml.XMLParser");

.define("String","letter","true","Letter");
.define("String","digit","true","Digit");
.define("String","hexdigit","true","Hexdigit");
.define("String","any","true","any");
.define("String","sp","true","Space(s)");
.define("String","ws","false","Whitespace");
.define("bool","eoi","true","End of Input");

.import("enki.BaseParser");
.import("std.stdio");
.import("std.utf");
.import("xml.BaseXMLParser");
.import("xml.QName");
.import("xml.Attribute");
.parsetype("String");
.classname("XMLParser");
.baseclass("BaseXMLParser");

##################################

SpaceChar ::= (#0020 | #000a | #000d | #0009 | #3000);
S ::= SpaceChar {SpaceChar};
WS ::= {SpaceChar};

Character ::= #09 | #0A | #0D | #20-#FFFD | #00010000-#7FFFFFFF;

BaseChar ::= #41-#5A | #61-#7A   
	| #AA | #B5 | #BA | #C0-#D6 | #D8-#F6   
	| #F8-#FF   
	| #0100-#017F   
	| #0180-#01F5 | #01FA-#0217   
	| #0250-#02A8   
	| #02B0-#02B8 | #02BB-#02C1 | #02E0-#02E4   
	| #037A | #0386 | #0388-#038A | #038C | #038E-#03A1 | #03A3-#03CE | #03D0-#03D6 | #03DA | #03DC | #03DE | #03E0 | #03E2-#03F3   
	| #0401-#040C | #040E-#044F | #0451-#045C | #045E-#0481 | #0490-#04C4 | #04C7-#04C8 | #04CB-#04CC | #04D0-#04EB | #04EE-#04F5 | #04F8-#04F9   
	| #0531-#0556 | #0559-#055A | #0561-#0587   
	| #05D0-#05EA | #05F0-#05F2   
	| #0621-#063A | #0641-#064A | #0671-#06B7 | #06BA-#06BE | #06C0-#06CE | #06D0-#06D3 | #06D5-#06D6 | #06E5-#06E6   
	| #0905-#0939 | #093D | #0958-#0961   
	| #0981 | #0985-#098C | #098F-#0990 | #0993-#09A8 | #09AA-#09B0 | #09B2 | #09B6-#09B9 | #09DC-#09DD | #09DF-#09E1 | #09F0-#09F1   
	| #0A05-#0A0A | #0A0F-#0A10 | #0A13-#0A28 | #0A2A-#0A30 | #0A32-#0A33 | #0A35-#0A36 | #0A38-#0A39   
	| #0A8F-#0A91 | #0A93-#0AA8 | #0AAA-#0AB0 | #0AB2-#0AB3 | #0AB5-#0AB9 | #0AE0   
	| #0B05-#0B0C | #0B0F-#0B10 | #0B13-#0B28 | #0B2A-#0B30 | #0B32-#0B33 | #0B36-#0B39 | #0B3D | #0B5C-#0B5D | #0B5F-#0B61   
	| #0B85-#0B8A | #0B8E-#0B90 | #0B92-#0B95 | #0B99-#0B9A | #0B9C | #0B9E-#0B9F | #0BA3-#0BA4 | #0BA8-#0BAA | #0BAE-#0BB5 | #0BB7-#0BB9   
	| #0C05-#0C0C | #0C0E-#0C10 | #0C12-#0C28 | #0C2A-#0C33 | #0C35-#0C39 | #0C60-#0C61   
	| #0C85-#0C8C | #0C8E-#0C90 | #0C92-#0CA8 | #0CAA-#0CB3 | #0CB5-#0CB9 | #0CDE | #0CE0-#0CE1   
	| #0D05-#0D0C | #0D0E-#0D10 | #0D12-#0D28 | #0D2A-#0D39 | #0D60-#0D61   
	| #0E01-#0E2E | #0E30 | #0E32-#0E33 | #0E40-#0E45   
	| #0E81-#0E82 | #0E84 | #0E87-#0E88 | #0E8A | #0E8D | #0E94-#0E97 | #0E99-#0E9F | #0EA1-#0EA3 | #0EA5 | #0EA7 | #0EAA-#0EAB | #0EAD-#0EAE | #0EB0 | #0EB2-#0EB3 | #0EBD | #0EC0-#0EC4 | #0EDC-#0EDD   
	| #0F40-#0F47 | #0F49-#0F69   
	| #10A0-#10C5 | #10D0-#10F6   
	| #1100-#1159 | #115F-#11A2 | #11A8-#11F9   
	| #1E00-#1E9B | #1EA0-#1EF9   
	| #1F00-#1F15 | #1F18-#1F1D | #1F20-#1F45 | #1F48-#1F4D | #1F50-#1F57 | #1F59 | #1F5B | #1F5D | #1F5F-#1F7D | #1F80-#1FB4 | #1FB6-#1FBC | #1FBE | #1FC2-#1FC4 | #1FC6-#1FCC | #1FD0-#1FD3 | #1FD6-#1FDB | #1FE0-#1FEC | #1FF2-#1FF4 | #1FF6-#1FFC   
	| #207F   
	| #2102 | #2107 | #210A-#2113 | #2115 | #2118-#211D | #2124 | #2126 | #2128 | #212A-#212D | #212F-#2131 | #2133-#2138   
	| #2160-#2182   
	| #3041-#3094   
	| #30A1-#30FA   
	| #3105-#312C   
	| #3131-#318E   
	| #AC00-#D7A3
	| #FB00-#FB06 | #FB13-#FB17 | #FB1F-#FB28 | #FB2A-#FB36 | #FB38-#FB3C | #FB3E | #FB40-#FB41 | #FB43-#FB44 | #FB46-#FB4F   
	| #FB50-#FBB1 | #FBD3-#FD3D | #FD50-#FD8F | #FD92-#FDC7 | #FDF0-#FDF8 | #FE70-#FE72 | #FE74 | #FE76-#FEFC   
	| #FF21-#FF3A | #FF41-#FF5A | #FF66-#FF6F | #FE71-#FF9D | #FFA0-#FFBE | #FFC2-#FFC7 | #FFCA-#FFCF | #FFD2-#FFD7 | #FFDA-#FFDC;   

Ideographic ::= #4E00-#9FA5 | #F900-#FA2D | #3007 | #3021-#3029;

CombiningChar ::= #0300-#0361 | #0483-#0486 | #0591-#05C4 | #064B-#0652 | #0670 | #06D7-#06DC | 
	#06DD-#06DF | #06E0-#06E4 | #06E7-#06E8 | #06EA-#06ED | #0901-#0903 | #093E-#094C | #094D | 
	#0951-#0954 | #0962-#0963 | #0981-#0983 | #09BC | #09BE | #09BF | #09C0-#09C4 | #09C7-#09C8 | 
	#09CB-#09CD | #09D7 | #09E2-#09E3 | #0A02 | #0A3C | #0A3E | #0A3F | #0A40-#0A42 | #0A47-#0A48 | 
	#0A4B-#0A4D | #0A70-#0A71 | #0A81-#0A83 | #0ABC | #0ABE-#0AC5 | #0AC7-#0AC9 | #0ACB | #0ACC | 
	#0B01-#0B03 | #0B3C | #0B3E-#0B43 | #0B47-#0B48 | #0B4B-#0B4C | #0B56-#0B57 | #0B82-#0B83 | 
	#0BBE-#0BC2 | #0BC6-#0BC8 | #0BCA-#0BCC | #0BD7 | #0C01-#0C03 | #0C3E-#0C44 | #0C46-#0C48 | 
	#0C4A-#0C4D | #0C55-#0C56 | #0C82-#0C83 | #0CBE-#0CC4 | #0CC6-#0CC8 | #0CCA-#0CCC | #0CD5-#0CD6 | 
	#0D02-#0D03 | #0D3E-#0D43 | #0D46-#0D48 | #0D4A-#0D4C | #0D57 | #0E31 | #0E34-#0E3A | #0E47-#0E4E | 
	#0EB1 | #0EB4-#0EB9 | #0EBB-#0EBC | #0EC8-#0ECD | #0F18-#0F19 | #0F35 | #0F37 | #0F39 | #0F3E | #0F3F | 
	#0F71-#0F84 | #0F86-#0F8B | #0F90-#0F95 | #0F97 | #0F99-#0FAD | #0FB1-#0FB7 | #0FB9 | #20D0-#20DC   | 
	#20E1 | #302A-#302F | #3099 | #309A | #FB1E | #FE20-#FE23;

Letter ::= (BaseChar {CombiningChar}) | Ideographic;

Digit ::= #0030-#0039   
	| #0660-#0669   
	| #06F0-#06F9   
	| #0966-#096F   
	| #09E6-#09EF   
	| #0A66-#0A6F   
	| #0AE6-#0AEF   
	| #0B66-#0B6F   
	| #0BE7-#0BEF   
	| #0C66-#0C6F   
	| #0CE6-#0CEF   
	| #0D66-#0D6F   
	| #0E50-#0E59   
	| #0ED0-#0ED9   
	| #0F20-#0F29   
	| #FF10-#FF19;  

Ignorable ::= #200C-#200F   
	| #202A-#202E   
	| #206A-#206F   
	| #FEFF;   

Extender ::= #00B7 | #02D0 | #02D1 | #0387 | #0640 | #0E46 | #0EC6 | #3005 | #3031-#3035 | #309B-#309E | #30FC-#30FE | #FF70 | #FF9E | #FF9F;

MiscName 
	::= "." | "-" | Ignorable | Extender;

NameChar 
	::= Letter | Digit | MiscName;

QName
	= QName QName.create(prefix,suffix)
	::= Name:prefix [WS ":" WS Name:suffix];

Name = String value 
	::= ((Letter | "-") {NameChar}):value;

Nmtoken 
	::= NameChar {NameChar};

Nmtokens
	::= Nmtoken {S Nmtoken};

Literal 
	= String value
	::= ("\"" | "'"):delim { PEReference:value | CharRef:value} .delim;

QuotedCData 
	= String value
	::= ("\"" | "'"):delim {Reference:~value | any:~value} .delim;

Eq 
	::= WS "=" WS;

PCData 
	= void onPCData(value)
	::= any:value {any:~value} /!("<" | "&");

Comment
	= void onComment(value)
	::= "<!--" {any}:value "--" ">";

PI 
	= void onPI(target,value,bool isXML)
	::= "<?" (PITarget!(isXML)):target ("?" | (S {any:~value} "?")) ">";

PITarget(isXML) 
	::= XMLPITarget:isXML | Name; 

XMLPITarget 
	::= ("X" | "x") ("M" | "m") ("L" | "l");
 
#
#CData
#

CDSect
	= String value
	::= "<![CDATA[" {any}:value "]]>";


#
# document and Prolog
#

Document ::= @onStartDocument Prolog element {Misc} eoi @onEndDocument;

Prolog ::= [{Misc}] [doctypedecl] [{Misc}];

Misc ::= Comment | PI | S;

doctypedecl 
	::= "<!DOCTYPE" S Name:name [S ExternalID:externalID] WS 
	@onStartDoctype!(name,externalID)
		["[" {internalsubset} "]" WS] ">"
	@onEndDoctype!(name,externalID);

internalsubset 
	::= elementdecl | AttlistDecl | EntityDecl | NotationDecl | PEReference | conditionalSect | PI | S | Comment;
#
# XML Tags and content
#
	
Attribute
	= Attribute Attribute.create(name,value)
	::= QName:name Eq QuotedCData:value;

content
	::= (element | Reference | CDSect | PI | Comment | PCData);

element 
	= void onEndTag(QName name,Attribute[] attrs)
	::= "<" QName:name WS {Attribute:~attrs WS} /("/>"|">")
		@onStartTag!(name,attrs) 
		( 
			"/>" |	">" {content} "</" QName:name WS ">"
		);
		
#
# DOCTYPE support
#

elementdecl ::= "<!ELEMENT" S Name S ("EMPTY" | "ANY" | Mixed | elements) WS ">";

Mixed ::= ("(" WS "#PCDATA" WS ")") | ("(" WS "#PCDATA" { WS "|" WS Name WS} ")" "*");

elements ::= (choice | seq) ["?" | "*" | "+"];

cp ::= (Name | choice | seq) ["?" | "*" | "+"];

cps ::= WS cp WS;

choice ::= "(" cps ["|" cps {"|" cps}] ")";

seq ::= "(" cps {"," cps} ")";

AttlistDecl ::= "<!ATTLIST" S Name [AttDef {AttDef}] WS ">";

AttDef ::= S Name S AttType S Default;

AttType ::= StringType | TokenizedType | EnumeratedType;

StringType ::= "CDATA";

TokenizedType ::= "ID";

EnumeratedType ::= NotationType | Enumeration;

NotationType ::= "NOTATION" S "(" WS Name WS {Name WS} ")";

Enumeration ::= "(" WS Nmtoken WS {Name WS} ")";

Default ::= "#REQUIRED" | "#IMPLIED" | (["#FIXED"] QuotedCData);

conditionalSect ::= "<![" CSKey "[" csdata "]]>";

CSKey ::= PEReference | "INCLUDE" | "IGNORE";

csdata 
	::= internalsubset;

#
# Character References
#
	
Hex4 
	::= hexdigit hexdigit hexdigit hexdigit;

Reference 
	= String value
	::= EntityRef:value | CharRef:value;

CharRef 
	::= "&" (DecimalCharRef | HexCharRef);

DecimalCharRef
	= String resolveDecimalCharRef(value)
	::= "#" (digit {digit}):value ";";

HexCharRef 
	= String resolveHexCharRef(value)
	::= "u-" (Hex4):value ";";	
	
EntityRef 
	= String resolveEntityRef(name)
	::= "&" (Name):name ";";

PEReference 
	= String resolvePEReference(name)
	::= "%" (Name):name ";";

EntityDecl ::= GeneralEntityDecl | ParamEntityDecl;
GeneralEntityDecl ::= "<!ENTITY" S Name S EntityDef WS ">";
ParamEntityDecl ::=	"<!ENTITY" S "%" S Name S EntityDef WS ">";

EntityDef ::= Literal | ExternalDef;

ExternalDef 
	::= ExternalID [NDataDecl];

ExternalID 
	= String value
	::= "SYSTEM" S SystemLiteral:value;

SystemLiteral
	= String value
	::= ("\"" | "'"):delim {any}:value .delim;

NDataDecl ::= S "NDATA" S Name;

# Name comprising only Latin characters
LatinName ::= letter {letter | digit | "-" | "."};

NotationDecl ::= "<!NOTATION" S Name S ExternalID WS ">";